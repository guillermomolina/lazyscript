/*
 * Copyright (c) 2012, 2019, Guillermo Adri√°n Molina. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * The Universal Permissive License (UPL), Version 1.0
 *
 * Subject to the condition set forth below, permission is hereby granted to any
 * person obtaining a copy of this software, associated documentation and/or
 * data (collectively the "Software"), free of charge and under any and all
 * copyright rights in the Software, and any and all patent rights owned or
 * freely licensable by each licensor hereunder covering either (i) the
 * unmodified Software as contributed to or provided by such licensor, or (ii)
 * the Larger Works (as defined below), to deal in both
 *
 * (a) the Software, and
 *
 * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
 * one is included with the Software each a "Larger Work" to which the Software
 * is contributed by such licensors),
 *
 * without restriction, including without limitation the rights to copy, create
 * derivative works of, display, perform, and distribute the Software and make,
 * use, sell, offer for sale, import, export, have made, and have sold the
 * Software and the Larger Work(s), and to sublicense the foregoing rights on
 * either these or other terms.
 *
 * This license is subject to the following condition:
 *
 * The above copyright notice and either this complete permission notice or at a
 * minimum a reference to the UPL must be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.guillermomolina.lazyscript.nodes.property;

import com.guillermomolina.lazyscript.nodes.expression.LSExpressionNode;
import com.guillermomolina.lazyscript.nodes.util.LSToMemberNode;
import com.guillermomolina.lazyscript.runtime.LSUndefinedNameException;
import com.guillermomolina.lazyscript.runtime.objects.LSFunction;
import com.oracle.truffle.api.dsl.Cached;
import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.interop.ArityException;
import com.oracle.truffle.api.interop.InteropLibrary;
import com.oracle.truffle.api.interop.InvalidArrayIndexException;
import com.oracle.truffle.api.interop.UnknownIdentifierException;
import com.oracle.truffle.api.interop.UnsupportedMessageException;
import com.oracle.truffle.api.interop.UnsupportedTypeException;
import com.oracle.truffle.api.library.CachedLibrary;
import com.oracle.truffle.api.nodes.NodeInfo;

@NodeInfo(shortName = ".()")
@NodeChild("receiverNode")
@NodeChild("nameNode")
@NodeChild(value = "arguments", type = LSExpressionNode[].class)
public abstract class LSInvokePropertyNode extends LSExpressionNode {

    static final int LIBRARY_LIMIT = 3;

    @Specialization(guards = "arrays.hasArrayElements(receiver)", limit = "LIBRARY_LIMIT")
    protected Object invokeArray(Object receiver, Object index, Object[] arguments,
            @CachedLibrary("receiver") InteropLibrary arrays, @CachedLibrary("index") InteropLibrary numbers) {
        try {
            Object function = arrays.readArrayElement(receiver, numbers.asLong(index));
            if(function instanceof LSFunction) {
                return callFunction(receiver, (LSFunction)function, arguments);
            }
            throw UnsupportedMessageException.create();
        } catch (UnsupportedMessageException | InvalidArrayIndexException e) {
            // invoke was not successful. In LazyScript we only have basic support for errors.
            throw LSUndefinedNameException.undefinedProperty(this, index);
        }
    }

    @Specialization(guards = "objects.hasMembers(receiver)", limit = "LIBRARY_LIMIT")
    protected Object invokeObject(Object receiver, Object name, Object[] arguments,
            @CachedLibrary("receiver") InteropLibrary objects, @Cached LSToMemberNode asMember) {
        try {
            Object function = objects.readMember(receiver, asMember.execute(name));
            if(function instanceof LSFunction) {
                return callFunction(receiver, (LSFunction)function, arguments);
            }
            throw UnsupportedMessageException.create();
        } catch (UnsupportedMessageException | UnknownIdentifierException e) {
            // invoke was not successful. In LazyScript we only have basic support for errors.
            throw LSUndefinedNameException.undefinedProperty(this, name);
        }
    }

    @Specialization(limit = "LIBRARY_LIMIT")
    protected Object invokeNonObject(Object receiver, Object name, Object[] arguments,
            @CachedLibrary("receiver") InteropLibrary objects, @Cached LSToMemberNode asMember) {
        try {
            Object prototype = getContext().getPrototype(receiver);
            Object function = objects.readMember(prototype, asMember.execute(name));
            if(function instanceof LSFunction) {
                return callFunction(receiver, (LSFunction)function, arguments);
            }
            throw UnsupportedMessageException.create();
        } catch (UnsupportedMessageException | UnknownIdentifierException e) {
            // invoke was not successful. In LazyScript we only have basic support for errors.
            throw LSUndefinedNameException.undefinedProperty(this, name);
        }
    }

    protected Object callFunction(Object receiver, LSFunction function, Object arguments[]) {
        InteropLibrary library = InteropLibrary.getFactory().createDispatched(3);
        
        Object[] fullArguments = new Object[arguments.length + 1];
        fullArguments[0] = receiver;
        for (int i = 0; i < arguments.length; i++) {
            fullArguments[i + 1] = arguments[i];
        }

        try {
            return library.execute(function, fullArguments);
        } catch (ArityException | UnsupportedTypeException | UnsupportedMessageException e) {
            throw LSUndefinedNameException.undefinedFunction(this, function.getName());
        }
    }


}
